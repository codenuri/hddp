// 방문자 패턴의 의미!!
class Shape
{
	virtual void Draw() = 0;
//	virtual void Move() = 0; // <== 오퍼레이션(가상함수)의 추가
};
class Rect   : public Shape {};
class Circle : public Shape {};


// 전통적인 객체지향 디자인
// => ? 자리에 "쉽다"  "어렵다" 로 채워 보세요.
// 클래스의   추가 : 쉽다. 다형성을 잘 활용했다면.. 
// 가상함수의 추가 : 어렵다. 모든 도형이 변경되어야 한다.




// 그런데, Move()라는 가상함수를 추가하지말고!!
ShapeMoveVisitor v;
컨테이너.accept(&v); // 이렇게 하면 ??


// 방문자 패턴으로 디자인 하면
// 클래스의 추가   : 어려워 진다
// 가상 함수의 추가 : 쉽다.
//					진짜 가상함수의 추가가 아닌
//					가상함수가 할일을 방문자 객체로 설계



